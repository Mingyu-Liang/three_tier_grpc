// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor_17b8c58d586b62f2) }

var fileDescriptor_17b8c58d586b62f2 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x29, 0x71, 0xf1, 0x78, 0x80, 0x78, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42,
	0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92,
	0x1a, 0x17, 0x17, 0x54, 0x4d, 0x41, 0x4e, 0xa5, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71,
	0x62, 0x3a, 0x4c, 0x11, 0x8c, 0x6b, 0xd4, 0xca, 0xc8, 0xc5, 0x59, 0x9c, 0x5a, 0x54, 0x96, 0x99,
	0x9c, 0x1a, 0x6f, 0x20, 0x64, 0xcd, 0xc5, 0x5a, 0x54, 0x90, 0x1c, 0x6f, 0x20, 0x24, 0xa1, 0x87,
	0xe4, 0x02, 0x64, 0xcb, 0xa4, 0xc4, 0xb0, 0xc8, 0x14, 0xe4, 0x54, 0x2a, 0x31, 0xc0, 0x34, 0x1b,
	0x93, 0xa3, 0xd9, 0xc8, 0x03, 0xe1, 0x0c, 0x43, 0x98, 0x49, 0x86, 0x94, 0x9a, 0x64, 0x04, 0x33,
	0xc9, 0x88, 0x1c, 0x93, 0x9c, 0xcc, 0xb8, 0xa4, 0x33, 0xf3, 0xf5, 0xd2, 0x8b, 0x0a, 0x92, 0xf5,
	0x52, 0x2b, 0x12, 0x73, 0x0b, 0x72, 0x52, 0x8b, 0x91, 0xd4, 0x3a, 0xf1, 0x83, 0x15, 0x87, 0x83,
	0xd8, 0x01, 0xa0, 0x38, 0x0a, 0x60, 0x5c, 0xc4, 0xc4, 0xec, 0xe1, 0x13, 0x9e, 0xc4, 0x06, 0x8e,
	0x32, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x86, 0xe7, 0xc6, 0x17, 0xc6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// Service_0Client is the client API for Service_0 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Service_0Client interface {
	Rpc_0(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Rpc_3(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type service_0Client struct {
	cc grpc.ClientConnInterface
}

func NewService_0Client(cc grpc.ClientConnInterface) Service_0Client {
	return &service_0Client{cc}
}

func (c *service_0Client) Rpc_0(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.service_0/rpc_0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service_0Client) Rpc_3(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.service_0/rpc_3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service_0Server is the server API for Service_0 service.
type Service_0Server interface {
	Rpc_0(context.Context, *HelloRequest) (*HelloReply, error)
	Rpc_3(context.Context, *HelloRequest) (*HelloReply, error)
}

// UnimplementedService_0Server can be embedded to have forward compatible implementations.
type UnimplementedService_0Server struct {
}

func (*UnimplementedService_0Server) Rpc_0(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpc_0 not implemented")
}
func (*UnimplementedService_0Server) Rpc_3(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpc_3 not implemented")
}

func RegisterService_0Server(s *grpc.Server, srv Service_0Server) {
	s.RegisterService(&_Service_0_serviceDesc, srv)
}

func _Service_0_Rpc_0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service_0Server).Rpc_0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.service_0/Rpc_0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service_0Server).Rpc_0(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_0_Rpc_3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service_0Server).Rpc_3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.service_0/Rpc_3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service_0Server).Rpc_3(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_0_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.service_0",
	HandlerType: (*Service_0Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rpc_0",
			Handler:    _Service_0_Rpc_0_Handler,
		},
		{
			MethodName: "rpc_3",
			Handler:    _Service_0_Rpc_3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

// Service_1Client is the client API for Service_1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Service_1Client interface {
	Rpc_1(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type service_1Client struct {
	cc grpc.ClientConnInterface
}

func NewService_1Client(cc grpc.ClientConnInterface) Service_1Client {
	return &service_1Client{cc}
}

func (c *service_1Client) Rpc_1(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.service_1/rpc_1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service_1Server is the server API for Service_1 service.
type Service_1Server interface {
	Rpc_1(context.Context, *HelloRequest) (*HelloReply, error)
}

// UnimplementedService_1Server can be embedded to have forward compatible implementations.
type UnimplementedService_1Server struct {
}

func (*UnimplementedService_1Server) Rpc_1(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpc_1 not implemented")
}

func RegisterService_1Server(s *grpc.Server, srv Service_1Server) {
	s.RegisterService(&_Service_1_serviceDesc, srv)
}

func _Service_1_Rpc_1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service_1Server).Rpc_1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.service_1/Rpc_1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service_1Server).Rpc_1(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.service_1",
	HandlerType: (*Service_1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rpc_1",
			Handler:    _Service_1_Rpc_1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

// Service_2Client is the client API for Service_2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Service_2Client interface {
	Rpc_2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type service_2Client struct {
	cc grpc.ClientConnInterface
}

func NewService_2Client(cc grpc.ClientConnInterface) Service_2Client {
	return &service_2Client{cc}
}

func (c *service_2Client) Rpc_2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.service_2/rpc_2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service_2Server is the server API for Service_2 service.
type Service_2Server interface {
	Rpc_2(context.Context, *HelloRequest) (*HelloReply, error)
}

// UnimplementedService_2Server can be embedded to have forward compatible implementations.
type UnimplementedService_2Server struct {
}

func (*UnimplementedService_2Server) Rpc_2(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpc_2 not implemented")
}

func RegisterService_2Server(s *grpc.Server, srv Service_2Server) {
	s.RegisterService(&_Service_2_serviceDesc, srv)
}

func _Service_2_Rpc_2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service_2Server).Rpc_2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.service_2/Rpc_2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service_2Server).Rpc_2(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.service_2",
	HandlerType: (*Service_2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rpc_2",
			Handler:    _Service_2_Rpc_2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}
